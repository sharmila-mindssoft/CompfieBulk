
worker_processes 1;

error_log /var/log/nginx/error.log;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
}


http {
    # Enumerate all the Tornado servers here
    upstream knowledge {
        server 127.0.0.1:8081;
        server 127.0.0.1:8082;
    }

	upstream webfront {
		server 127.0.0.1:8083;
        server 127.0.0.1:8084;
	}

    # include /usr/local/nginx/conf/mime.types;
    default_type application/octet-stream;

    access_log /var/log/nginx/access.log;

    client_body_timeout 30;
    client_header_timeout 30;
    keepalive_timeout 65;
    proxy_read_timeout 200;
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    gzip on;
    gzip_min_length 1000;
    gzip_proxied expired no-cache no-store private auth;
    gzip_types text/plain text/css text/xml
               application/x-javascript application/xml
               application/atom+xml text/javascript;

    # Only retry if there was a communication error, not a timeout
    # on the Tornado server (to avoid propagating "queries of death"
    # to all frontends)
    proxy_next_upstream error;
    server {
        listen 8080 default_server;
        server_name mirror;
        # Allow file uploads
        client_max_body_size 100M;

		location /knowledge/ {
	    	try_files $uri @knowledge;
		}

        location @knowledge {
            proxy_pass_header Server;
            proxy_set_header Host $http_host;
            proxy_redirect off;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Scheme $scheme;
            proxy_pass http://knowledge;
        }

		location / {
	    	try_files $uri @webfront;
		}

		location @webfront {
			proxy_pass_header Server;
			proxy_set_header Host $http_post;
			proxy_redirect off;
			proxy_set_header X-Real_IP $remote_addr;
			proxy_set_header X-Scheme $scheme;
			proxy_pass http://webfront;

		}

    }
}